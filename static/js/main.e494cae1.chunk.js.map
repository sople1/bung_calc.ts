{"version":3,"sources":["MenuAppBar.tsx","calculator/Form.tsx","calculator/PreviewPoint.tsx","config/config.ts","calculator/PointParser.ts","calculator/ResultView.tsx","calculator/Calculator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","MenuAppBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Form","state","all","passed","reverse","event","target","select","Grid","container","alignItems","item","xs","sm","md","lg","xl","TextField","label","id","value","this","props","onChange","handleChange","people_all","onFocus","handleFocusInput","margin","size","people_passed","Switch","checked","name","inputProps","React","Component","PreviewPoint","list","point","get","text","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","index","key","scope","length","num","point_negative","point_positive","upper","render_list","join","render_grid","withStyles","typo_point_title","withTheme","config","pad","pos","PointParser","count","lower","get_list","get_list_minus","temp","_points","_slice","slice","sort","a","b","x","ResultView","type","earn_point","p","rank_limit","rev_rank_limit","isNaN","Array","from","keys","print_number","calc_point","Calculator","parseInt","setState","init_point","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e494cae1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function MenuAppBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        붕지노 계산기\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\ninterface Props{\r\n    all: number,\r\n    passed: number,\r\n    reverse: boolean,\r\n    handleChange: {\r\n        people_all: (event: React.ChangeEvent<HTMLInputElement>) => void,\r\n        people_passed: (event: React.ChangeEvent<HTMLInputElement>) => void,\r\n        reverse: (event: React.ChangeEvent<HTMLInputElement>) => void,\r\n    }\r\n}\r\n\r\ninterface State{\r\n    all: number,\r\n    passed: number,\r\n    reverse: boolean\r\n}\r\n\r\nclass Form extends React.Component<Props, State> {\r\n    state:State = {\r\n        all: 0,\r\n        passed: 0,\r\n        reverse: false\r\n    };\r\n\r\n    handleFocusInput(event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>)  {\r\n        event.target.select();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Form\">\r\n                <Grid container alignItems=\"center\" spacing={1}>\r\n                    <Grid item xs={4} sm={3} md={2} lg={1} xl={1}>\r\n                        <TextField\r\n                            label=\"총원\"\r\n                            id=\"people_all\"\r\n                            value={this.props.all}\r\n                            onChange={this.props.handleChange.people_all}\r\n                            onFocus={this.handleFocusInput}\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            size=\"small\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4} sm={3} md={2} lg={1} xl={1}>\r\n                        <TextField\r\n                            label=\"통과\"\r\n                            id=\"people_passed\"\r\n                            value={this.props.passed}\r\n                            onChange={this.props.handleChange.people_passed}\r\n                            onFocus={this.handleFocusInput}\r\n                            variant=\"outlined\"\r\n                            margin=\"dense\"\r\n                            size=\"small\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid container item xs={4} sm={6} md={8} lg={10} xl={10} alignItems=\"center\">\r\n                        <Grid item>정</Grid>\r\n                        <Grid item>\r\n                            <Switch\r\n                                checked={this.props.reverse}\r\n                                onChange={this.props.handleChange.reverse}\r\n                                name=\"reverse\"\r\n                                inputProps={{'aria-label': 'secondary checkbox'}}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>역</Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport PointParser from \"./PointParser\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Theme, Typography} from \"@material-ui/core\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport { createStyles, withStyles, WithStyles } from \"@material-ui/core/styles\";\r\n\r\ninterface Props extends WithStyles<typeof styles>{\r\n    point: PointParser,\r\n    reverse: boolean\r\n}\r\n\r\ninterface State{\r\n}\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    root: {\r\n        margin: \"5px 0\"\r\n    },\r\n    typo_point_title: {\r\n        margin: 1\r\n    },\r\n    point_positive: {\r\n        color: \"blue\"\r\n    },\r\n    point_negative: {\r\n        color: \"red\"\r\n    },\r\n});\r\n\r\nclass PreviewPoint extends React.Component<Props, State> {\r\n\r\n    render_list(name: string) {\r\n        const { classes } = this.props;\r\n        let list = this.props.point.get(name);\r\n        let text: {[k: string]: any} = {\r\n            \"upper\": \"상위권 포인트\",\r\n            \"lower\": \"하위권 포인트\",\r\n        };\r\n        let print_number = (num: number) => {\r\n            if (num < 0)\r\n                return (\r\n                    <Typography variant=\"body1\" className={classes.point_negative}>\r\n                        {num}\r\n                    </Typography>\r\n                );\r\n\r\n            if (num > 0)\r\n                return (\r\n                    <Typography variant=\"body1\" className={classes.point_positive}>\r\n                        {num}\r\n                    </Typography>\r\n                );\r\n\r\n            return (\r\n                <Typography variant=\"body1\">\r\n                    -\r\n                </Typography>\r\n            );\r\n        }\r\n        return (\r\n            <Grid item id={`gain-points-${name}`} xs={6}>\r\n                <Typography variant=\"subtitle2\">\r\n                    {text[name]}\r\n                </Typography>\r\n                <TableContainer component={Paper}>\r\n                    <Table aria-label={text[name]} size=\"small\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">순위</TableCell>\r\n                                <TableCell align=\"center\">포인트</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {list.map((point: number, index:number) => (\r\n                                <TableRow key={index}>\r\n                                    <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                                        {((name == \"lower\") ? list.length - index : index + 1)}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        {print_number(point)}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    render_grid() {\r\n        if (this.props.point.upper.length > 0) {\r\n            return (\r\n                <Grid container alignItems=\"center\" spacing={1} id=\"gain-points\">\r\n                    {[\"upper\", \"lower\"].map((name: string) => (\r\n                        this.render_list(name)\r\n                    ))}\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Typography variant=\"subtitle1\">\r\n                인원수와 정/역 방향을 선택하세요.\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div className={[\"PreviewPoint\", classes.root].join(\" \")}>\r\n                <Typography variant=\"h6\">\r\n                    예상 포인트\r\n                </Typography>\r\n                {(this.props.reverse) ? (\r\n                    <Typography variant=\"subtitle1\">\r\n                        역방향\r\n                    </Typography>\r\n                ) : null}\r\n                {this.render_grid()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(PreviewPoint);\r\n\r\n","/**\r\n 10명 미만 3 (천)\r\n 15명 미만 5 3\r\n 20명 미만 7 5 3\r\n 25명 미만 10 7 5 3 1\r\n 30명 미만 15 10 7 5 3 1\r\n */\r\n\r\nlet config = {\r\n    point: {\r\n        list: [1, 3, 5, 7, 10, 15, 20,],\r\n        pad: 1000,\r\n        pos: 1\r\n    },\r\n\r\n};\r\n\r\n\r\nexport default config;","import config from \"../config/config\";\r\n\r\nclass PointParser {\r\n    upper: number[];\r\n    lower: number[];\r\n\r\n    constructor(count: number) {\r\n        this.upper = this.get_list(count);\r\n        this.lower = this.get_list_minus(count);\r\n    }\r\n\r\n    reverse() {\r\n        let temp = this.upper.reverse();\r\n        this.upper = this.lower.reverse();\r\n        this.lower = temp;\r\n\r\n        return this;\r\n    }\r\n\r\n    get(name: string) {\r\n        switch (name) {\r\n            case \"upper\":\r\n                return this.upper;\r\n            case \"lower\":\r\n                return this.lower;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    get_list(count: number) {\r\n        if (count < 1) {\r\n            return [];\r\n        }\r\n\r\n        let _points = config.point.list;\r\n        let _slice = 0;\r\n\r\n        switch(true) {\r\n            case count < 10:\r\n                _slice = 2;\r\n                break;\r\n            case count < 15:\r\n                _slice = 3;\r\n                break;\r\n            case count < 20:\r\n                _slice = 4;\r\n                break;\r\n            case count < 25:\r\n                _slice = 5;\r\n                break;\r\n            case count < 30:\r\n                _slice = 6;\r\n                break;\r\n            default:\r\n                _slice = _points.length - 1;\r\n                break;\r\n        }\r\n\r\n        _points = _points.slice(0, _slice);\r\n\r\n        if (count < 20) {\r\n            _points = _points.slice(1);\r\n        }\r\n\r\n        return _points.sort((a: number, b: number) => b - a).map((x: number) =>  x * config.point.pad);\r\n    }\r\n\r\n    get_list_minus(count: number) {\r\n        let _points = this.get_list(count);\r\n\r\n        return _points.sort((a: number, b: number) => a - b).map((x: number) => x * -1);\r\n    }\r\n}\r\n\r\n\r\nexport default PointParser","import React from \"react\";\r\nimport PointParser from \"./PointParser\";\r\nimport {Theme, Typography} from \"@material-ui/core\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport { createStyles, withStyles, WithStyles } from \"@material-ui/core/styles\";\r\n\r\ninterface Props extends WithStyles<typeof styles>{\r\n    all: number,\r\n    passed: number,\r\n    point: PointParser,\r\n    reverse: boolean\r\n}\r\n\r\ninterface State{\r\n}\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    root: {\r\n        margin: \"5px 0\"\r\n    },\r\n    point_positive: {\r\n        color: \"blue\"\r\n    },\r\n    point_negative: {\r\n        color: \"red\"\r\n    },\r\n\r\n});\r\n\r\nclass ResultView extends React.Component<Props, State> {\r\n    calc_point(index: number, type: string) {\r\n        let earn_point = 0;\r\n        let p = this.props;\r\n        let rank_limit = p.point.upper.length;\r\n\r\n        if (index >= p.passed)\r\n            return 0;\r\n\r\n        if (type == \"full\" || type == \"plus\") {\r\n            if (index < rank_limit) {\r\n                earn_point += p.point.upper[index];\r\n            }\r\n        }\r\n\r\n        if (type == \"full\" || type == \"minus\") {\r\n            let rev_rank_limit = p.passed - rank_limit;\r\n            if (index >= rev_rank_limit) {\r\n                earn_point += p.point.lower[index - rev_rank_limit];\r\n            }\r\n        }\r\n\r\n        return earn_point;\r\n    }\r\n\r\n    render_list() {\r\n        if (isNaN(this.props.all))\r\n            return null;\r\n\r\n        const { classes } = this.props;\r\n        let list = Array.from(Array(this.props.all).keys());\r\n        let print_number = (num: number) => {\r\n            if (num < 0)\r\n                return (\r\n                    <Typography variant=\"body1\" className={classes.point_negative}>\r\n                        {num}\r\n                    </Typography>\r\n                );\r\n\r\n            if (num > 0)\r\n                return (\r\n                    <Typography variant=\"body1\" className={classes.point_positive}>\r\n                        {num}\r\n                    </Typography>\r\n                );\r\n\r\n            return (\r\n                <Typography variant=\"body1\">\r\n                    -\r\n                </Typography>\r\n            );\r\n        }\r\n        return (\r\n            <TableContainer component={Paper}>\r\n                <Table aria-label=\"result\" size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell component=\"th\" align=\"center\">순위</TableCell>\r\n                            <TableCell component=\"th\" align=\"center\">획득 포인트</TableCell>\r\n                            <TableCell component=\"th\" align=\"center\">증가</TableCell>\r\n                            <TableCell component=\"th\" align=\"center\">감소</TableCell>\r\n                            <TableCell component=\"th\" align=\"center\">-</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {list.map((num: number) => (\r\n                            <TableRow key={num}>\r\n                                <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                                    {num + 1}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    {print_number(this.calc_point(num, 'full'))}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    {print_number(this.calc_point(num, 'plus'))}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    {print_number(this.calc_point(num, 'minus'))}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    -\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div className={[\"ResultView\", classes.root].join(\" \")}>\r\n                <Typography variant=\"h6\">\r\n                    산출결과\r\n                </Typography>\r\n                {(this.props.point.upper.length > 0) ?\r\n                    this.render_list() :\r\n                    (\r\n                        <Typography variant=\"subtitle1\">\r\n                            인원수와 정/역 방향을 선택하세요.\r\n                        </Typography>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(ResultView);\r\n\r\n","import React from 'react';\r\nimport Form from './Form';\r\nimport PreviewPoint from './PreviewPoint';\r\nimport PointParser from \"./PointParser\";\r\nimport ResultView from \"./ResultView\";\r\n\r\n\r\ninterface Props{\r\n\r\n}\r\n\r\ninterface State{\r\n    all: number,\r\n    passed: number,\r\n    reverse: boolean\r\n}\r\n\r\nclass Calculator extends React.Component<Props, State> {\r\n    state: State = {\r\n        all: 0,\r\n        passed: 0,\r\n        reverse: false\r\n    };\r\n\r\n    handleChange = {\r\n        people_all: (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            let value = parseInt(event.target.value);\r\n            let key_name = \"all\";\r\n            if (isNaN(value)) {\r\n                event.target.value = `0`;\r\n                event.target.select();\r\n            }\r\n            else {\r\n                if (value >= 100)\r\n                    event.target.value = '99';\r\n            }\r\n            this.setState({...this.state, [key_name]: parseInt(event.target.value), passed: 0, reverse: false});\r\n        },\r\n        people_passed: (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            let value = parseInt(event.target.value);\r\n            let key_name = \"passed\";\r\n            if (isNaN(value)) {\r\n                event.target.value = `0`;\r\n                event.target.select();\r\n            }\r\n            else {\r\n                if (value >= 100)\r\n                    event.target.value = '99';\r\n                if (value >= this.state.all)\r\n                    event.target.value = `${this.state.all}`;\r\n            }\r\n            this.setState({...this.state, [key_name]: parseInt(event.target.value)});\r\n        },\r\n        reverse: (event: React.ChangeEvent<HTMLInputElement>) => {\r\n            this.setState({...this.state, [event.target.name]: event.target.checked});\r\n        }\r\n    }\r\n\r\n    init_point() {\r\n        let point = new PointParser(this.state.all);\r\n        if (this.state.reverse)\r\n            point = point.reverse();\r\n\r\n        return point;\r\n    }\r\n\r\n        render() {\r\n        let point = this.init_point();\r\n\r\n        return (\r\n            <div className=\"Calculator\">\r\n                <h1>hello</h1>\r\n                <Form all={this.state.all}\r\n                      passed={this.state.passed}\r\n                      reverse={this.state.reverse}\r\n                      handleChange={this.handleChange} />\r\n                <PreviewPoint point={point}\r\n                              reverse={this.state.reverse} />\r\n                <ResultView all={this.state.all}\r\n                            passed={this.state.passed}\r\n                            point={point}\r\n                            reverse={this.state.reverse} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport MenuAppBar from \"./MenuAppBar\";\nimport Calculator from \"./calculator/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MenuAppBar />\n      </header>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}